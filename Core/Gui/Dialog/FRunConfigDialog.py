# Copyright (c) 2012 The Khronos Group Inc.
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and /or associated documentation files (the "Materials "), to deal in the Materials without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Materials, and to permit persons to whom the Materials are furnished to do so, subject to 
# the following conditions: 
# The above copyright notice and this permission notice shall be included 
# in all copies or substantial portions of the Materials. 
# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

import os
import os.path
import shutil
import wx

import Core.Common.FUtils as FUtils
from Core.Common.FConstants import *
from Core.Gui.Dialog.FSettingSizer import *

class FRunConfigDialog(wx.Dialog):
    """The dialog to create a new run. 
    
    Access to public members only garuanteed if the OK button was pressed and 
    the dialog closed.
    
    public members:
        self.selectedRun -- The applications/operations selected using this 
        dialog.
        self.title -- The title selected using this dialog.
    private members:
        self.__ID_OK -- ID for OK button.
        self.__ID_CANCEL -- ID for Cancel button.
        self.__ID_ADD -- ID for Add button.
        self.__ID_DELETE -- ID for Delete button.
        self.__ID_OPLIST -- ID for Operations ListBox.
        self.__titleText -- TextCtrl for the title text box.
        self.__opList -- ListCtrl for the operations in add section.
        self.__appList -- ListCtrl for the applications in add section.
        self.__curList -- ListCtrl for the current list in current section.
        self.__displayedApps -- Dictionary of {"operation with app": [apps using operation]} entries
    """
    
    __DIALOG_TITLE = "New Test Procedure"
    
    def __init__(self, parent, applicationMap):
        """Creates this dialog.
        
        arguments:
            parent -- the parent frame for this dialog.
        
        """
        wx.Dialog.__init__(self, parent, wx.ID_ANY, 
                           FRunConfigDialog.__DIALOG_TITLE)
        self.__applicationMap = applicationMap
        
        self.__displayedApps = self.__GetDisplayedApps()
        
        self.__InitializeIds()
        self.selectedRun = []
        
        outterSizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(outterSizer)
        
        self.__comments = None
        
        titleSizer = self.__GetTitleSizer()
        addSizer = self.__GetAddSizer()
        currentSizer = self.__GetCurrentSizer()
        commentsSizer = self.__GetCommentsSizer()
        bottomSizer = self.__GetBottomSizer()
        
        outterSizer.Add(titleSizer, 0, wx.EXPAND | wx.ALL, 5)
        outterSizer.Add(addSizer, 0, wx.EXPAND | wx.ALL, 5)
        outterSizer.Add(currentSizer, 0, wx.EXPAND | wx.ALL, 5)
        outterSizer.Add(commentsSizer, 0, wx.EXPAND | wx.ALL, 5)
        outterSizer.Add(bottomSizer, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        
        self.Fit()
    
    def GetComments(self):
        return self.__comments.GetValue()
    
    def __OnOk(self, e):
        """Call-back function when OK button is pressed.
        
        It checks to make sure that:
            - there is at least 1 operation
            - there is a non-empty title for the run
            - the title for the run does not conflict with a previous run (or
            the user decides to overwrite
            
        arguments:
            e -- the event generated by the OK button being pressed.
            
        """
        if (len(self.selectedRun) == 0): 
            FUtils.ShowWarning(self, "Add at least one operation.")
            return
        
        self.title = self.__titleText.GetValue()
        
        if (self.title == ""): 
            FUtils.ShowWarning(self, "Enter a title for this test procedure.")
            return
        
        if (not FUtils.IsValidFilename(self.title)):
            FUtils.ShowWarning(self, "Not valid title for test procedure; " +
                               "cannot contain the following characters: \n" +
                               FUtils.GetInvalidString())
            return
        
        runPath = os.path.join(os.getcwd(), RUNS_FOLDER, self.title)
        
        if (os.path.isdir(runPath)):
            comments = ""
            file = os.path.join(runPath, TEST_PROCEDURE_COMMENTS)
            if (os.path.isfile(file)):
                f = open(file)
                line = f.readline()
                while (line):
                    comments = comments + line
                    line = f.readline()
                f.close()
            
            if (comments == ""):
                text = ("Already a run named \"" + self.title + "\". There " +
                        "were no comments. Do you want to overwrite?")
            else:
                text = ("Already a run named \"" + self.title + "\". " + 
                        "The comments are: \n\n" + comments + "\n\nDo you " +
                        "want to overwrite?")
            
            confirm = wx.MessageDialog(self, text, "Confirmation", 
                    wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
                    
            if (confirm.ShowModal() == wx.ID_NO):
                return
        
        if (not os.path.isdir(RUNS_FOLDER)):
            os.mkdir(RUNS_FOLDER)
        
        if (os.path.isdir(runPath)):
            try:
                shutil.rmtree(runPath)
            except OSError, e:
                text = (str(runPath) + " is in use. Select another name for " +
                        "the run or close any application using that " +
                        "directory.")
                FUtils.ShowWarning(self, text)
                return
        
        if (self.IsModal()):
            self.EndModal(wx.ID_OK)
        else:
            self.SetReturnCode(wx.ID_OK)
            self.Show(False)
    
    def __OnCancel(self, e):
        """Call-back function when Cancel button is pressed.
        
        arguments:
            e -- the event generated by the Cancel button being pressed.
            
        """
        if (self.IsModal()):
            self.EndModal(wx.ID_CANCEL)
        else:
            self.SetReturnCode(wx.ID_CANCEL)
            self.Show(False)
    
    def __OnAdd(self, e):
        """Call-back function when Add button is pressed.
        
        arguments:
            e -- the event generated by the Add button being pressed.
            
        """
        opSelection = self.__opList.GetSelection()
        if (opSelection < 0): 
            FUtils.ShowWarning(self, "No operation selected")
            return
        
        opString = self.__opList.GetString(opSelection)
        
        if (opString == VALIDATE and opString not in OPS_NEEDING_APP):
            opTuple = (opString, None)
            
            if (len(self.selectedRun) < 1):
                self.selectedRun.append( (None, [opTuple,]) )
                message = ">>" + opString
            else:
                self.selectedRun[-1][1].append(opTuple)
                message = ">>" + opString
        else:
            settingName = self.__settingSizer.GetSettingName()
            
            # Should work for IMPORT and VALIDATE, no guarantees otherwise
            if (opString in OPS_NEEDING_APP):
                appSelection = self.__appList.GetSelection()
                if (appSelection < 0): 
                    FUtils.ShowWarning(self, "No application selected")
                    return
                appString = self.__appList.GetString(appSelection)
                
                if (settingName == None):
                    FUtils.ShowWarning(self, "Must select a setting")
                    return
                
                opTuple = (opString, settingName)
                
                self.selectedRun.append( (appString, [opTuple,]) )
                # NOTE: might be useful in future: code for hiding opeations
               # newOperations = (OPS_NEEDING_APP + 
               #         self.__applicationMap[appString].GetOperationsList() + 
               #         [VALIDATE])
               # newOperations = FUtils.UniqueList(newOperations)
               # self.__opList.Clear()
               # self.__opList.AppendItems(newOperations)
               # selectionIndex = self.__opList.FindString(opString)
               # if (selectionIndex != wx.NOT_FOUND):
               #     self.__opList.SetSelection(selectionIndex) 
                message = "[" + appString + "] " + opString
            else:
                if ((len(self.selectedRun) < 1) or 
                        (self.selectedRun[-1][0] == None)):
                    # the only op needing app is import
                    FUtils.ShowWarning(self, "Must import first")
                    return
                appString = self.selectedRun[-1][0]
                
                application = self.__applicationMap[appString]
                operationsList = application.GetOperationsList()
                if (operationsList.count(opString) < 1):
                    FUtils.ShowWarning(self, 
                            "Operation not supported by application")
                    return
                
                if (settingName == None):
                    FUtils.ShowWarning(self, "Must select a setting")
                    return
                
                opTuple = (opString, settingName)
                
                self.selectedRun[-1][1].append(opTuple)
                message = "[" + appString + "] " + opString
            
            message = message + " (" + settingName + ")"
        
        self.__curList.Append(message)
        
        self.__OnUpdateSetting(e)
    
    def __OnDelete(self, e):
        """Call-back function when Delete button is pressed.
        
        arguments:
            e -- the event generated by the Delete button being pressed.
            
        """
        if (len(self.selectedRun) < 1):
            FUtils.ShowWarning(self, "Nothing to delete")
            return
        
        self.selectedRun[-1][1].pop()
        if (len(self.selectedRun[-1][1]) < 1):
            self.selectedRun.pop()
            
        self.__curList.Delete(self.__curList.GetCount() - 1)
        
        self.__OnUpdateSetting(e)
    
    def __OnOpListClick(self, e):
        """Call-back function when clicked in the operations list.
        
        arguments:
        e -- the event generated by clicking the mouse in the operations list.
        
        """
        selectedString = self.__opList.GetString(self.__opList.GetSelection()) 
        if (selectedString in OPS_NEEDING_APP):
            self.__appList.Set(self.__displayedApps[selectedString])
            self.__appList.Show()
        else:
            self.__appList.Hide()
        
        self.__OnUpdateSetting(e)
    
    def __OnUpdateSetting(self, e):
        op = self.__opList.GetStringSelection()
        app = self.__appList.GetStringSelection()
        
        if (op in OPS_NEEDING_APP):
            if (app != wx.EmptyString):
                self.__settingSizer.SetOperation(app, op, 
                        "[" + app + "] " + op)
                self.__settingSizer.Enable(True)
            else:
                self.__settingSizer.SetTitle()
                self.__settingSizer.Enable(False)
        elif (op == VALIDATE):
            self.__settingSizer.SetOperation(">>", op, ">> " + op)
            self.__settingSizer.Enable(False)
        else:
            if (len(self.selectedRun) != 0):
                app = self.selectedRun[-1][0]
                if (app != None): # not validate
                    self.__settingSizer.SetOperation(app, op, 
                            "[" + app + "] " + op)
                    self.__settingSizer.Enable(True)
                else:
                    self.__settingSizer.SetTitle()
                    self.__settingSizer.Enable(False)
            else:
                self.__settingSizer.SetTitle()
                self.__settingSizer.Enable(False)
    
    def __InitializeIds(self):
        """Gives the IDs for the events a valid."""
        self.__ID_OK = wx.NewId()
        self.__ID_CANCEL = wx.NewId()
        self.__ID_ADD = wx.NewId()
        self.__ID_DELETE = wx.NewId()
        self.__ID_OPLIST = wx.NewId()
        self.__ID_APPLIST = wx.NewId()

    def __GetDisplayedApps(self):
        """Returns a dictionary with entries of the form {"operation":[list of apps using operation]}"""
        
        displayedApps = self.__applicationMap.keys()
        displayedApps.sort()
        
        opsList = []
        
        for ops in OPS_NEEDING_APP:
            thisOpsList = []
            
            [thisOpsList.append(x) for x in displayedApps if ops in self.__applicationMap[x].GetOperationsList()]
            [displayedApps.remove(x) for x in thisOpsList]
            
            opsList.append(thisOpsList)
            
        return dict(zip(OPS_NEEDING_APP,opsList))
        

    def __GetTitleSizer(self):
        """Returns the Sizer used to get the title of the run."""
        titleSizer = wx.BoxSizer(wx.HORIZONTAL)
        titleSizer.Add(wx.StaticText(self, wx.ID_ANY, 
                                     "Title of Test Procedure:"),
                       0, wx.ALL, 5)
        self.__titleText = wx.TextCtrl(self, wx.ID_ANY)
        titleSizer.Add(self.__titleText, 1, wx.EXPAND | wx.ALL, 5)
        return titleSizer        
    
    def __GetAddSizer(self):
        """Returns the Sizer used to add operations to the run."""
        staticBoxAdd = wx.StaticBox(self, wx.ID_ANY, "Add Operation")
        outterSizer = wx.StaticBoxSizer(staticBoxAdd, wx.VERTICAL)
        
        addSizer = wx.BoxSizer(wx.HORIZONTAL)
        
        self.__opList = wx.ListBox(self, self.__ID_OPLIST, wx.DefaultPosition, 
                                   wx.DefaultSize, OPERATIONS, wx.LB_SINGLE)
        addSizer.Add(self.__opList, 1, wx.GROW | wx.ALL, 5)
        wx.EVT_LISTBOX(self, self.__ID_OPLIST, self.__OnOpListClick)
        
        
        self.__appList = wx.ListBox(self, self.__ID_APPLIST, 
                wx.DefaultPosition, wx.DefaultSize, [], 
                wx.LB_SINGLE)
        addSizer.Add(self.__appList, 1, wx.GROW | wx.ALL, 5)
        self.Bind(wx.EVT_LISTBOX, self.__OnUpdateSetting, self.__appList, 
                  self.__ID_APPLIST)
        
        addButton = wx.Button(self, self.__ID_ADD, "Add")
        wx.EVT_BUTTON(self, self.__ID_ADD, self.__OnAdd)
        addSizer.Add(addButton, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        
        outterSizer.Add(addSizer, 1, wx.EXPAND)
        
        self.__settingSizer = FSettingSizer(self, self.__applicationMap)
        self.__settingSizer.Enable(False)
        outterSizer.Add(self.__settingSizer, 0, wx.EXPAND)
        
        return outterSizer
    
    def __GetCurrentSizer(self):
        """Returns the Sizer used to view and delete operations of the run."""
        staticBoxCurrent = wx.StaticBox(self, wx.ID_ANY, "Chosen Operations")
        currentSizer = wx.StaticBoxSizer(staticBoxCurrent, wx.HORIZONTAL)
        
        self.__curList = wx.ListBox(self, wx.ID_ANY, wx.DefaultPosition, 
                                    wx.DefaultSize, [])
        currentSizer.Add(self.__curList, 1, wx.GROW | wx.ALL, 5)
        
        deleteButton = wx.Button(self, self.__ID_DELETE, "Delete Last")
        wx.EVT_BUTTON(self, self.__ID_DELETE, self.__OnDelete)
        currentSizer.Add(deleteButton, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        
        return currentSizer
    
    def __GetCommentsSizer(self):
        """Returns the Sizer used for comments."""
        staticBox = wx.StaticBox(self, wx.ID_ANY, "Comments")
        sizer = wx.StaticBoxSizer(staticBox, wx.HORIZONTAL)
        
        self.__comments = wx.TextCtrl(self, wx.ID_ANY, "", 
                                      style = wx.TE_MULTILINE)
        sizer.Add(self.__comments, 1, wx.EXPAND | wx.ALL, 5)
        
        return sizer
    
    def __GetBottomSizer(self):
        """Returns the Sizer used to confirm or cancel this dialog."""
        okButton = wx.Button(self, self.__ID_OK, "Ok")
        wx.EVT_BUTTON(self, self.__ID_OK, self.__OnOk)
        cancelButton = wx.Button(self, self.__ID_CANCEL, "Cancel")
        wx.EVT_BUTTON(self, self.__ID_CANCEL, self.__OnCancel)
        
        bottomSizer = wx.BoxSizer(wx.HORIZONTAL)
        bottomSizer.Add(okButton, 0, wx.ALIGN_LEFT)
        bottomSizer.Add(cancelButton, 0, wx.ALIGN_RIGHT)
        
        return bottomSizer
    

# Used to start up this dialog without the entire application.
##class MainFrame(wx.MDIParentFrame):
##    def __init__(self, parent, id, title):
##        wx.MDIParentFrame.__init__(self, parent, id, title, size = (600, 480),
##                style = wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)
##                
##        dialog = FRunConfigDialog(self)
##        dialog.ShowModal()
##        print dialog.GetComments()
##        
##app = wx.PySimpleApp()
##frame = MainFrame(None,-1, "Test")
##app.MainLoop()
