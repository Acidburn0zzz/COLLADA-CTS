# Copyright (C) 2006 Khronos Group
# Available only to Khronos members.
# Distribution of this file or its content is strictly prohibited.

import wx
import wx.lib.scrolledpanel

import Core.Common.FUtils as FUtils

class FChangeSettingsDialog(wx.Dialog):
    
    def __init__(self, parent, dialogTitle, settings, settingTitle, editable):
        """Creates this dialog.
        
        arguments:
            parent -- the parent frame for this dialog.
        
        """
        wx.Dialog.__init__(self, parent, wx.ID_ANY, dialogTitle)
        
        self.__editable = editable
        self.__title = settingTitle
        self.__settingCtrls = []
        self.__InitializeIds()
        self.__settings = settings
        
        outterSizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(outterSizer)
        
        titleSizer = self.__GetTitleSizer()
        middleSizer = self.__GetScrolledSizer(settings)
        bottomSizer = self.__GetBottomSizer()
        
        outterSizer.Add(titleSizer, 0, wx.EXPAND | wx.ALL, 5)
        outterSizer.Add(middleSizer, 0, wx.EXPAND | wx.ALL, 5)
        outterSizer.Add(bottomSizer, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        
        self.Fit()
        
    def GetSettings(self):
        return self.__settings
    
    def __OnOk(self, e):
        """Call-back function when OK button is pressed.
        
        It checks to make sure that:
            - there is at least 1 operation
            - there is a non-empty title for the run
            - the title for the run does not conflict with a previous run (or
            the user decides to overwrite
            
        arguments:
            e -- the event generated by the OK button being pressed.
            
        """
        self.title = self.__titleText.GetValue()
        if (self.title == ""): 
            self.__ShowWarning("Enter a title for this setting.")
            return
        
        if (not FUtils.IsValidFilename(self.title)):
            self.__ShowWarning("Not valid title for test procedure; cannot " +
                               "contain the following characters: \n" +
                               FUtils.GetInvalidString())
            return
        
        for entry in self.__settingCtrls:
            entry[0].SetValue(entry[1].GetValue())
        
        if (self.IsModal()):
            self.EndModal(wx.ID_OK)
        else:
            self.SetReturnCode(wx.ID_OK)
            self.Show(False)
    
    def __OnCancel(self, e):
        """Call-back function when Cancel button is pressed.
        
        arguments:
            e -- the event generated by the Cancel button being pressed.
            
        """
        if (self.IsModal()):
            self.EndModal(wx.ID_CANCEL)
        else:
            self.SetReturnCode(wx.ID_CANCEL)
            self.Show(False)
    
    def __InitializeIds(self):
        """Gives the IDs for the events a valid."""
        self.__ID_OK = wx.NewId()
        self.__ID_CANCEL = wx.NewId()
    
    def __GetTitleSizer(self):
        """Returns the Sizer used to get the title of the run."""
        titleSizer = wx.BoxSizer(wx.HORIZONTAL)
        titleSizer.Add(wx.StaticText(self, wx.ID_ANY, "Title of Setting:"), 0, 
                       wx.ALL, 5)
        self.__titleText = wx.TextCtrl(self, wx.ID_ANY)
        self.__titleText.SetValue(self.__title)
        self.__titleText.Enable(self.__editable)
        titleSizer.Add(self.__titleText, 1, wx.EXPAND | wx.ALL, 5)
            
        return titleSizer  
    
    def __GetScrolledSizer(self, settings):
        scrolledSizer = wx.BoxSizer(wx.VERTICAL)
        
        scrolledPanel = wx.lib.scrolledpanel.ScrolledPanel(self, wx.ID_ANY, 
                size = (300, 300), style=wx.SUNKEN_BORDER)
        scrolledSizer.Add(scrolledPanel, 1, wx.EXPAND)
        
        sizer = wx.GridSizer(len(settings), 2, 5, 5)
        
        for setting in settings:
            label = wx.StaticText(scrolledPanel, wx.ID_ANY, 
                                  setting.GetPrettyName() + ":")
            textCtrl = wx.TextCtrl(scrolledPanel, wx.ID_ANY, 
                                   setting.GetValue())
            textCtrl.Enable(self.__editable)
            self.__settingCtrls.append((setting, textCtrl))
            sizer.Add(label, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL)
            sizer.Add(textCtrl, 0)
            
        padSizer = wx.BoxSizer(wx.VERTICAL)
        padSizer.Add(sizer, 1, wx.EXPAND | wx.ALL, 5)
        scrolledPanel.SetSizer(padSizer)
        scrolledPanel.SetAutoLayout(True)
        scrolledPanel.SetupScrolling()
        
        return scrolledSizer
    
    def __GetBottomSizer(self):
        """Returns the Sizer used to confirm or cancel this dialog."""
        okButton = wx.Button(self, self.__ID_OK, "Save")
        okButton.Enable(self.__editable)
        wx.EVT_BUTTON(self, self.__ID_OK, self.__OnOk)
        
        bottomSizer = wx.BoxSizer(wx.HORIZONTAL)
        bottomSizer.Add(okButton, 0, wx.ALIGN_LEFT)
        
        cancelButton = wx.Button(self, self.__ID_CANCEL, "Cancel")
        wx.EVT_BUTTON(self, self.__ID_CANCEL, self.__OnCancel)
        bottomSizer.Add(cancelButton, 0, wx.ALIGN_RIGHT)
        
        return bottomSizer
    
    def __ShowWarning(self, message):
        """Displays a modal warning dialog.
        
        arguments:
            message -- The message to be written in the dialog.
            
        """
        alert = wx.MessageDialog(self, message, "Alert", 
                                 wx.OK | wx.ICON_EXCLAMATION)
        alert.ShowModal()
        alert.Destroy()
    
# Used to start up this dialog without the entire application.
#from Scripts.FViewer import *
##from Scripts.FMax import *
##from FConstants import *
##
##class MainFrame(wx.MDIParentFrame):
##    def __init__(self, parent, id, title):
##        wx.MDIParentFrame.__init__(self, parent, id, title, size = (600, 480),
##                style = wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)
##        
##        #settings = FViewer().GetSettingsForOperation(IMPORT)
##        settings = FMax().GetSettingsForOperation(RENDER)
##        for setting in settings:
##                print (setting.GetPrettyName() + " " + setting.GetCommand() 
##                        + " " + setting.GetValue())
##        print "\n\n"
##        
##        dialog = FChangeSettingsDialog(self, "[3DSMax 7] Render", 
##        #dialog = FChangeSettingsDialog(self, "[Feeling Viewer] Import", 
##                settings, [])
##        if (dialog.ShowModal() == wx.ID_OK):
##            print dialog.title
##            for setting in dialog.GetSettings():
##                print (setting.GetPrettyName() + " " + setting.GetCommand() 
##                        + " " + setting.GetValue())
##        
##        print "\n\n"
##        for setting in settings:
##                print (setting.GetPrettyName() + " " + setting.GetCommand() 
##                        + " " + setting.GetValue())
##        
##        dialog.Destroy()
##        
##app = wx.PySimpleApp()
##frame = MainFrame(None,-1, "Test")
##app.MainLoop()